[project]
name = "financial-data-extractor"
version = "0.1.0"
description = "Automated platform to scrape, classify, parse, and compile multi-year financial statements from European company investor relations websites"
readme = "README.md"
requires-python = ">=3.13,<3.14"
license = {text = "Apache-2.0"}
authors = [
    {name = "Patryk Golabek", email = "pgolabek@gmail.com"}
]
keywords = ["financial-data", "pdf-extraction", "fastapi", "celery", "openai"]

dependencies = [
    # FastAPI Core
    "fastapi>=0.115.0,<0.116.0",
    "uvicorn[standard]>=0.32.0,<0.33.0",
    "pydantic>=2.9.0,<3.0.0",
    "pydantic-settings>=2.6.0,<3.0.0",
    # Database
    "sqlalchemy>=2.0.36,<3.0.0",
    "asyncpg>=0.30.0,<0.31.0", # PostgreSQL async driver
    "alembic>=1.14.0,<2.0.0",
    # Celery & Redis
    "celery>=5.4.0,<6.0.0",
    "redis>=5.2.0,<6.0.0",
    # PDF Processing
    "pymupdf>=1.24.0,<2.0.0",
    "pdfplumber>=0.11.0,<0.12.0",
    "pillow>=11.0.0,<12.0.0",
    # LLM Integration
    "openai>=1.51.0,<2.0.0",
    # HTTP & Scraping
    "httpx>=0.27.0,<0.28.0",
    "beautifulsoup4>=4.12.0,<5.0.0",
    "lxml>=5.3.0,<6.0.0",
    # Monitoring & Logging
    "prometheus-client>=0.21.0,<0.22.0",
    "structlog>=24.4.0,<25.0.0",
    # Utils
    "python-dotenv>=1.0.0,<2.0.0",
    "rapidfuzz>=3.10.0,<4.0.0", # Fuzzy matching
    "python-json-logger>=4.0.0,<5.0.0",
    "tenacity>=9.1.2",
    "starlette-exporter>=0.23.0",
    "psycopg[binary,pool]>=3.2.12",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0,<9.0.0",
    "pytest-asyncio>=0.24.0,<0.25.0",
    "pytest-cov>=5.0.0,<6.0.0",
    "httpx>=0.27.0,<0.28.0",
    "black>=24.0.0,<25.0.0",
    "ruff>=0.14.0,<0.15.0",
    "mypy>=1.11.0,<2.0.0",
    "pylint>=3.3.0,<4.0.0",
]

# Build system
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

# Tool configurations
[tool.black]
line-length = 100
include = '\.pyi?$'

[tool.pylint.messages_control]
disable = [
    "invalid-name",
    "wrong-import-position",
]

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg-info",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["E501"]  # allow long lines in tests

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "kombu.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
