"""
ErrorHandler module.

Handles HTTP and custom exceptions using FastAPI's exception handler mechanism.

Author: Patryk Golabek
Copyright: 2025 Patryk Golabek
"""

import logging
from typing import Optional

from app.core.exceptions.custom_exceptions import (BusinessLogicError, Error,
                                                   ErrorType, ForbiddenError,
                                                   JSONFileNotFoundError,
                                                   JSONInvalidEncodingError,
                                                   JSONInvalidError)
from fastapi import FastAPI, HTTPException, Request, status
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field


class ProblemDetails(BaseModel):
    """
    Pydantic model for RFC 7807 Problem Details.

    Attributes:
        type (str): A URI reference that identifies the problem type.
        title (str): A short, human-readable summary of the problem type.
        status (int): The HTTP status code generated by the origin server.
        detail (str, optional): A human-readable explanation specific to this
            occurrence of the problem.
        instance (str, optional): A URI reference that identifies the specific
            occurrence of the problem.
    """

    type: str = Field(
        "about:blank", description="A URI reference that identifies the problem type."
    )
    title: str = Field(
        "Unknown Error", description="A short, human-readable summary of the problem type."
    )
    status: int = Field(
        status.HTTP_500_INTERNAL_SERVER_ERROR,
        description="The HTTP status code generated by the origin server.",
    )
    detail: Optional[str] = Field(
        "An unexpected error occurred.",
        description="A human-readable explanation specific to this occurrence of the problem.",
    )
    instance: Optional[str] = Field(
        None, description="A URI reference that identifies the specific occurrence of the problem."
    )


class ErrorHandler:
    """
    ErrorHandler class to manage HTTP and custom exceptions.

    Attributes:
        app (FastAPI): The FastAPI application instance.
        logger (logging.Logger): Logger instance for logging errors.
    """

    def __init__(self, app: FastAPI, logger: logging.Logger):
        """
        Initialize ErrorHandler instance.

        Args:
            app (FastAPI): The FastAPI application instance.
            logger (logging.Logger): Logger instance for logging errors.
        """
        self.app = app
        self.logger = logger

    def register_default_handlers(self) -> None:
        """
        Register default exception handlers for the app.
        """
        # Register specific exception handlers first
        self.app.add_exception_handler(ForbiddenError, self.forbidden_error_handler)
        self.app.add_exception_handler(BusinessLogicError, self.business_logic_error_handler)
        self.app.add_exception_handler(
            JSONFileNotFoundError, self.json_file_not_found_error_handler
        )
        self.app.add_exception_handler(JSONInvalidError, self.json_invalid_error_handler)
        self.app.add_exception_handler(
            JSONInvalidEncodingError, self.json_invalid_encoding_error_handler
        )
        self.app.add_exception_handler(Error, self.custom_error_handler)
        self.app.add_exception_handler(HTTPException, self.http_exception_handler)
        self.app.add_exception_handler(Exception, self.general_exception_handler)
        self.logger.info("Default exception handlers have been registered successfully.")

    async def forbidden_error_handler(self, request: Request, exc: ForbiddenError) -> JSONResponse:
        """
        Handle ForbiddenError exceptions.

        Args:
            request (Request): The incoming request.
            exc (ForbiddenError): The ForbiddenError exception instance.

        Returns:
            JSONResponse: A ProblemDetails response with status 403.
        """
        self.logger.warning(
            f"{exc.title}: {exc.detail} | Instance: {exc.instance} | Type: {exc.type_}"
        )
        return await self._create_problem_response(
            request=request,
            exc=exc,
            status_code=exc.status_code,
            type_=exc.type_,
            title=exc.title,
            detail=exc.detail,
        )

    async def business_logic_error_handler(
        self, request: Request, exc: BusinessLogicError
    ) -> JSONResponse:
        """
        Handle BusinessLogicError exceptions.

        Args:
            request (Request): The incoming request.
            exc (BusinessLogicError): The BusinessLogicError exception instance.

        Returns:
            JSONResponse: A ProblemDetails response with status 400.
        """
        self.logger.warning(
            f"{exc.title}: {exc.detail} | Instance: {exc.instance} | Type: {exc.type_}"
        )
        return await self._create_problem_response(
            request=request,
            exc=exc,
            status_code=exc.status_code,
            type_=exc.type_,
            title=exc.title,
            detail=exc.detail,
        )

    async def json_file_not_found_error_handler(
        self, request: Request, exc: JSONFileNotFoundError
    ) -> JSONResponse:
        """
        Handle JSONFileNotFoundError exceptions.

        Args:
            request (Request): The incoming request.
            exc (JSONFileNotFoundError): The JSONFileNotFoundError exception instance.

        Returns:
            JSONResponse: A ProblemDetails response with status 404.
        """
        self.logger.warning(
            f"{exc.title}: {exc.detail} | Instance: {exc.instance} | Type: {exc.type_}"
        )
        return await self._create_problem_response(
            request=request,
            exc=exc,
            status_code=exc.status_code,
            type_=exc.type_,
            title=exc.title,
            detail=exc.detail,
        )

    async def json_invalid_error_handler(
        self, request: Request, exc: JSONInvalidError
    ) -> JSONResponse:
        """
        Handle JSONInvalidError exceptions.

        Args:
            request (Request): The incoming request.
            exc (JSONInvalidError): The JSONInvalidError exception instance.

        Returns:
            JSONResponse: A ProblemDetails response with status 400.
        """
        self.logger.warning(
            f"{exc.title}: {exc.detail} | Instance: {exc.instance} | Type: {exc.type_}"
        )
        return await self._create_problem_response(
            request=request,
            exc=exc,
            status_code=exc.status_code,
            type_=exc.type_,
            title=exc.title,
            detail=exc.detail,
        )

    async def json_invalid_encoding_error_handler(
        self, request: Request, exc: JSONInvalidEncodingError
    ) -> JSONResponse:
        """
        Handle JSONInvalidEncodingError exceptions.

        Args:
            request (Request): The incoming request.
            exc (JSONInvalidEncodingError): The JSONInvalidEncodingError exception instance.

        Returns:
            JSONResponse: A ProblemDetails response with status 415.
        """
        self.logger.warning(
            f"{exc.title}: {exc.detail} | Instance: {exc.instance} | Type: {exc.type_}"
        )
        return await self._create_problem_response(
            request=request,
            exc=exc,
            status_code=exc.status_code,
            type_=exc.type_,
            title=exc.title,
            detail=exc.detail,
        )

    async def custom_error_handler(self, request: Request, exc: Error) -> JSONResponse:
        """
        Handle generic custom Error exceptions.

        Args:
            request (Request): The incoming request.
            exc (Error): The generic Error exception instance.

        Returns:
            JSONResponse: A ProblemDetails response with the appropriate status.
        """
        self.logger.error(
            f"{exc.title}: {exc.detail} | Instance: {exc.instance} | Type: {exc.type_}"
        )
        return await self._create_problem_response(
            request=request,
            exc=exc,
            status_code=exc.status_code,
            type_=exc.type_,
            title=exc.title,
            detail=exc.detail,
        )

    async def http_exception_handler(self, request: Request, exc: HTTPException) -> JSONResponse:
        """
        Handle HTTPException instances.

        Args:
            request (Request): The incoming request.
            exc (HTTPException): The HTTPException instance.

        Returns:
            JSONResponse: A ProblemDetails response with the exception's status and detail.
        """
        self.logger.error(f"HTTP Exception: {exc.detail} | Status: {exc.status_code}")
        return await self._create_problem_response(
            request=request,
            exc=exc,
            status_code=exc.status_code,
            type_=f"https://httpstatuses.com/{exc.status_code}",
            title=exc.detail or "HTTP Exception",
            detail=exc.detail or "An HTTP exception occurred.",
        )

    async def general_exception_handler(self, request: Request, exc: Exception) -> JSONResponse:
        """
        Handle all uncaught exceptions.

        Args:
            request (Request): The incoming request.
            exc (Exception): The exception instance.

        Returns:
            JSONResponse: A ProblemDetails response with status 500.
        """
        # Include request path and method for better context
        self.logger.exception(
            f"Unhandled exception: {exc} | Path: {request.url.path} | Method: {request.method}"
        )
        return await self._create_problem_response(
            request=request,
            exc=exc,
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            type_=ErrorType.INTERNAL_SERVER_ERROR.value,
            title="Internal Server Error",
            detail="An unexpected error occurred.",
        )

    async def _create_problem_response(
        self,
        request: Request,
        exc: Exception,
        status_code: int,
        type_: str,
        title: str,
        detail: Optional[str] = None,
    ) -> JSONResponse:
        """
        Create a ProblemDetails response.

        Args:
            request (Request): The incoming request.
            exc (Exception): The exception instance.
            status_code (int): The HTTP status code for the response.
            type_ (str): A URI reference that identifies the problem type.
            title (str): A short, human-readable summary of the problem type.
            detail (Optional[str]): A human-readable explanation specific to this
                occurrence of the problem.

        Returns:
            JSONResponse: A ProblemDetails response.
        """
        if detail is None:
            detail = getattr(exc, "detail", "An unexpected error occurred.")

        # Include request_id if available
        request_id = getattr(request.state, "request_id", None)
        if request_id:
            detail = f"[Request ID: {request_id}] {detail}"

        problem = ProblemDetails(
            type=type_,
            title=title,
            status=status_code,
            detail=detail,
            instance=str(request.url),
        )

        return JSONResponse(
            status_code=status_code,
            content=problem.model_dump(),
            media_type="application/problem+json",
        )
